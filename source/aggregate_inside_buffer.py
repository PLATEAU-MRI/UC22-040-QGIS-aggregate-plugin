# -*- coding: utf-8 -*-
"""
This plugin is generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
"""
import sys
sys.dont_write_bytecode = True

from qgis.PyQt.QtCore import QSettings,QTranslator,QCoreApplication,Qt
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .aggregate_inside_buffer_dialog import aggregate_inside_bufferDialog
import os.path

import qgis
from qgis import processing
from qgis.core import *
from qgis.gui  import *
from PyQt5.QtWidgets import QAction,QMessageBox,QProgressBar,QDockWidget
from collections import Counter
import statistics

class aggregate_inside_buffer:
    """QGIS Plugin Implementation."""

    def __init__(self,iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'aggregate_inside_buffer_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&aggregate inside buffer')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

        # Create the dialog (after translation) and keep reference
        self.dlg = aggregate_inside_bufferDialog()

    # noinspection PyMethodMayBeStatic
    def tr(self,message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str,QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('aggregate_inside_buffer',message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon,text,parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/aggregate_inside_buffer/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'aggregate inside buffer'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&aggregate inside buffer'),
                action)
            self.iface.removeToolBarIcon(action)


    def run_buffer(self,geom,distance,segments):
        if geom is not None:
            buf = geom.buffer(distance,segments)
            return buf
        else:
            return None

    def dissolve(self,input_feats):
        # Function to dissolve input features to allow for buffering of multiple features

        feats = []
        # Create and empty list of features and add all features to it.
        # We use feature 0 later and this ensures it exits.
        for each_feat in input_feats:
            feats.append(each_feat)
        # Do not run if geometry is empty,produce an error instead.
        if len(feats) > 0:
            # Need to create empty geometry to hold the dissolved features,we use the first feature to seed it.
            # Combine require a non-empty geometry to work (I could not get it to work).
            feat = feats[0]
            dissolved_geom = feat.geometry()

            # Progress bar for dissolving
            progressMessageBar = self.iface.messageBar().createMessage("Dissolving...")
            progress = QProgressBar()
            progress.setAlignment(Qt.AlignLeft|Qt.AlignVCenter)
            progressMessageBar.layout().addWidget(progress)
            self.iface.messageBar().pushWidget(progressMessageBar)
            maximum_progress = len(feats)
            progress.setMaximum(maximum_progress)
            i = 0

            # Run through the features and dissolve them all.
            for each_feat in feats:
                geom = each_feat.geometry()
                dissolved_geom = geom.combine(dissolved_geom)
                i = i + 1
                progress.setValue(i + 1)
            return_f = QgsFeature()
            return_f.setGeometry(dissolved_geom)
            self.iface.messageBar().clearWidgets()
            return return_f
        else:
            QMessageBox.warning(self.iface.mainWindow(),"Warning",
                                "No features to dissolve.",QMessageBox.Ok)
            return input_feats

    def run(self):
        project = QgsProject.instance()

        # clear same name vector layers.
        L1 = len(project.mapLayersByName('Buffered'))
        L2 = len(project.mapLayersByName('output'))
        if L1 > 0:
            QgsProject.instance().removeMapLayer(project.mapLayersByName('Buffered')[0])
        if L2 > 0:
            QgsProject.instance().removeMapLayer(project.mapLayersByName('output')[0])

        # Get list of vector layers
        layers = list(QgsProject.instance().mapLayers().values())

        # Check there is at least one vector layer.
        vlayer_count = 0
        for layer in layers:
            if layer.type() == QgsMapLayer.VectorLayer:
                vlayer_count = vlayer_count + 1
        # Run the dialog event loop
        if vlayer_count > 0:
            # show the dialog
            self.dlg.show()
            #self.dlg.isSomethingSelected()
            result = self.dlg.exec_()
        else:
            QMessageBox.warning(self.iface.mainWindow(),"Warning",
                                "No vector layers.",QMessageBox.Ok)
            result = 0    
            
        listKeep = []
        listStats = []
        for row in range(self.dlg.tableWidget.rowCount()):
            listKeep.append(self.dlg.tableWidget.cellWidget(row,2).checkState())
            listStats.append(self.dlg.tableWidget.cellWidget(row,3).currentText())
       
        # See if OK was pressed
        if result == 1 and self.dlg.mMapLayerComboBox_line.currentLayer():
            buffering_layer = self.dlg.mMapLayerComboBox_line.currentLayer()
            sel_feats = []
            # Either buffer with all features or just selected ones
            if self.dlg.selectedfeats.isChecked():
                sel_feats = buffering_layer.selectedFeatures()
            else:
                selecting_feats_iterator = buffering_layer.getFeatures()
                sel_feats = []
                for s_feat in selecting_feats_iterator:
                    sel_feats.append(s_feat)
      
            # Inputs from the dialog:
            # if self.dlg.dissovle_button_2.isChecked():
            #     dissolve_bool = 1
            # else:
            dissolve_bool = 0

            segments_to_approximate = self.dlg.segmentsToApproximate.value()

            run_csv_buffer = False
            buffer_distance = self.dlg.bufferDistance.value()         
            add_old_attributes = 1

            # Create data provider for input layer to get fields.
            in_prov = buffering_layer.dataProvider()
            in_fields = in_prov.fields()

            buffer_crs_object = buffering_layer.crs()
            # Check the current CRS of the layer
            buffer_crs = buffer_crs_object.authid()
            # Apply that to the created layer if recognised
            buffer_input_crs = "Polygon?crs=%s" % buffer_crs
            # Create empty memory vector layer for buffers
            layer_name = buffering_layer.name()
           
            #vl = QgsVectorLayer(buffer_input_crs,"%s_Buffered" % layer_name,"memory")
            vl = QgsVectorLayer(buffer_input_crs,"Buffered","memory")


            vl_pr = vl.dataProvider()

            copy_atts = 0
            # Copy old attributes,only if not dissolving multiple features

            if (add_old_attributes == 1 and dissolve_bool == 0) or len(sel_feats) == 1:
                copy_atts = 1
                fields_to_add = []
                for field in in_fields:
                    fields_to_add.append(field)
                vl_pr.addAttributes(fields_to_add)
                vl.updateFields()
            else:
                copy_atts = 0
        
            # Dissolve the features if selected.
            if dissolve_bool == 1 and result == 1:
                sel2feats = []
                add_feat = self.dissolve(sel_feats)
                if copy_atts == 1:
                    new_attributes = []
                    for attributes in sel_feats[0].attributes():
                        new_attributes.append(attributes)
                    add_feat.setAttributes(new_attributes)
                # Our buffer loops require a list (as sel_feats originally is),so we append the features to a list.
                sel2feats.append(add_feat)
            else:
                sel2feats = sel_feats

            # Run if there are features in the layer
            if len(sel2feats) > 0 and result == 1:
                # Progress bar.
                progressMessageBar = self.iface.messageBar().createMessage("Buffering...")
                progress = QProgressBar()
                progress.setAlignment(Qt.AlignLeft | Qt.AlignVCenter)
                progressMessageBar.layout().addWidget(progress)
                self.iface.messageBar().pushWidget(progressMessageBar)
                if run_csv_buffer:
                    maximum_progress = len(sel2feats) * 1
                else:
                    maximum_progress = len(sel2feats) * 1
                progress.setMaximum(maximum_progress)
                i = 0
               
                # Buffer a feature 
                buffered = []
                for each_feat in sel2feats:
                   # to_clip = each_feat.geometry()

                       # for dist in buffer_csv:
                    geom = each_feat.geometry()
                    dist = buffer_distance
                    buff = self.run_buffer(geom,dist,segments_to_approximate)
                    new_f = QgsFeature()
                    new_f_clipped = buff
                    new_f.setGeometry(new_f_clipped)

                    if copy_atts == 1:
                        new_attributes = []
                        for attributes in each_feat.attributes():
                            new_attributes.append(attributes)
                        new_attributes.append(dist)
                        new_f.setAttributes(new_attributes)
                    else:
                        new_f.setAttributes([dist])
                    buffered.append(new_f)
                        #to_clip = to_clip.combine(buff)
                    i += 1
                    progress.setValue(i + 1)
                vl_pr.addFeatures(buffered)
                QgsProject.instance().addMapLayer(vl)
            
            self.iface.messageBar().clearWidgets()

            #Cr
            project = QgsProject.instance()

            Cr_input = self.dlg.mMapLayerComboBox_overlay.currentLayer()
            
            # if self.dlg.selectedfeats2.isChecked():
            #     Cr_input = self.dlg.mMapLayerComboBox_overlay.currentLayer()
            # else:
            #     Cr_input = self.dlg.mMapLayerComboBox_overlay.currentLayer.selectedFeatures()
            
            Cr_overlay = project.mapLayersByName('Buffered')[-1]
            #project.mapLayersByName('New_Buf')[0] 

            parameters = {
                'OVERLAY'               : Cr_overlay,
                'INPUT'                 : Cr_input ,
                'INPUT_FIELDS'          : '',
                'OVERLAY_FIELDS'        : '',
                'OVERLAY_FIELDS_PREFIX' : '',
                'OUTPUT'                : 'memory:'
                }

            Cr_intersect = processing.run("native:intersection",parameters)

            Cr_result = Cr_intersect['OUTPUT']

            project.addMapLayer(Cr_result)

            Co_selectedLayer = project.mapLayersByName('output')[-1]  
            Co_selectedField = self.dlg.mFieldComboBox.currentField()  
            self.run_cul(Co_selectedLayer,Co_selectedField,listKeep,listStats) 

    def run_cul(self,Co_selectedLayer,Co_selectedField,listKeep,listStats):
        # get output path and name
        outFile = self.dlg.outLayerName.text()      

        # run qgis:dissolve algorithm from processing module ('OUTPUT':'memory' for temporary layer)
        processing.run("native:dissolve",{'INPUT':Co_selectedLayer,'FIELD':[Co_selectedField],'OUTPUT':outFile})           
        
        # calculate new field values with calculateFields function
        dicNewValues = self.calculateFields(Co_selectedLayer,Co_selectedField,listKeep,listStats,outFile)
        
        # integrates these new values in the output attribute table,and remove fields if necessary with setAttributes function
        self.setAttributes(Co_selectedLayer,listKeep,outFile,dicNewValues,Co_selectedField)
        
        # add layer to map with addFile function
        self.addFile(outFile)


    # once the dissolve output layer is created,calculates its new attributes values
    def calculateFields(self,Co_selectedLayer,Co_selectedField,listKeep,listStats,outFile):
        # iterates over features to get attributes as list of lists : [['33','Aquitaine'],['40','Aquitaine'],['44','Pays de la Loire']]
        features = Co_selectedLayer.getFeatures()
        attrs = [feature.attributes() for feature in features]
        # get list of values for dissolve field,i.e. ['Aquitaine','Aquitaine','Pays de la Loire']
        indexDissolveField = Co_selectedLayer.fields().indexFromName(Co_selectedField)
        valuesDissolveField = [feature[indexDissolveField] for feature in attrs]
        
        # get list of fields names
        listFieldNames = Co_selectedLayer.fields().names()
        #listFieldNames = [field for field in listFieldNames if field != 'fid']
        
        listFieldNames_line = self.dlg.mMapLayerComboBox_line.currentLayer().fields().names()
        i = 0
        for i in range(0,len(listFieldNames_line)):
            listStats.append('First')
            listKeep.append(2)
            i = i+1
   
        # create empty dictionary,keys are dissolve field values,values are empty dictionaries (dict of dict)
        dicNewValues = dict((k,{}) for k in valuesDissolveField)
            # i.e  dicNewValues = {"route A":'',"route B":'',...  }  K= ["routa A","route B",...] 
        
        # values are now dictionaries with kept field for keys and empty lists for values
        for key in dicNewValues.keys():
            dicNewValues[key] = dict((k,[]) for k in listFieldNames)
            # i.e  dicNewValues = {"key":"" ,route A":'',"route B":'',...  }  K= ["Key","routa A","route B",...] 

        # for each kept field
        for j,field in enumerate(listFieldNames):
            # i.e listFieldNames = [1:area,2,b_name 3:No,4:Name) ]… (j,field)
            if j < len(listKeep):
                if listKeep[j] == 2:   
                    # get field values,i.e. ['44','33','40']
                    valuesField = [feature[j] for feature in attrs]
                    # populates dicNewValues -> {'Aquitaine':{'CODE_DEPT':['33','40'],'NOM_DEPT':['Gironde','Landes']},'Pays de la Loire':{...}}
                    for x,y in zip(valuesField,valuesDissolveField):
                        dicNewValues[y][field].append(x)
                    # calculates aggregation values for each new feature,i.e. for 'count' : [2,1]
                    for k in dicNewValues.keys():
                        newValues = self.aggregateValues(listStats[j],dicNewValues[k][field])
                        dicNewValues[k][field] = newValues
                        # QMessageBox.information(self.dlg,'break1',str(k) +' '+ str(newValues))
            else:
                valuesField = [feature[j] for feature in attrs]
                for x,y in zip(valuesField,valuesDissolveField):
                    dicNewValues[y][field].append(x)
                    
                for k in dicNewValues.keys():
                    newValues = valuesField[k]
                    dicNewValues[k][field] = newValues
        return dicNewValues
    
    # takes function name (count,mean,max...) and list of values as input,output one value as result
    def aggregateValues(self,stat,l):
        switcher = {
                # by alphabetical order
                #"Concatenation": lambda l: ",".join(l) if l else NULL,
                "Count": lambda l: len(l) if l else NULL,
                "First": lambda l: l[0] if l else NULL,
                "Last": lambda l: l[-1] if l else NULL,
                "Max": lambda l: max(l) if l else NULL,
                "Mean": lambda l: sum(l)/len(l) if l else NULL,
                "Median": lambda l: statistics.median(l) if l else NULL,
                "Min": lambda l: min(l) if l else NULL,
                "Standard deviation": lambda l: stdev(l) if l else NULL,
                "Sum": lambda l: sum(l) if l else NULL,
                "Uniquification": lambda l: ",".join(set(l)) if l else NULL,
                "Unique": lambda l: Counter(l) if l else NULL ,#
                }
        return switcher[stat](l)
    
    # removes fields from the output which mustn't be kept,and set the other field values
    def setAttributes(self,Co_selectedLayer,listKeep,outFile,dicNewValues,dissolveField):
        # get indexes of fields to be deleted
        listIndexesDel = [i for i in range(len(listKeep)) if listKeep[i] == 0]
        # get layer,provider and provider capabilities
        outputLayer = QgsVectorLayer(outFile,"name","ogr")
        provider = outputLayer.dataProvider()
        caps = provider.capabilities()
        # delete fields to be deleted
        if caps & QgsVectorDataProvider.DeleteAttributes:
            provider.deleteAttributes(listIndexesDel)
            outputLayer.updateFields()
        # get remaining fields names
        fields = outputLayer.fields().names()
        # get input layer fields names
        inputFields = Co_selectedLayer.fields().names()
        # for each remaining field
        outputLayer.startEditing()
        for field in fields:
            # check if field was present in input layer (useful if new field was created automatically like fid for gpkg)
            if field in inputFields:
                # for each feature
                iterator = outputLayer.getFeatures()
                for feature in iterator:
                    # set feature attribute for this field
                    dissolveValue = feature[dissolveField]
                    # QMessageBox.information(self.dlg,'break1',str(field) +' '+ str(dissolveValue))

                    feature[field] = dicNewValues[dissolveValue][field]
                    outputLayer.updateFeature(feature)
        outputLayer.commitChanges()
    
    # add output layer to the map
    def addFile(self,output):
        # get file name (for ex. 'result') from complete path (for ex. '/mnt/temp/result.shp')
        filename = output.split('/')[-1]
        filename = filename.split('.')[0]
        # load layer in QGIS
        vlayer = self.iface.addVectorLayer(output,filename,"ogr")
        if not vlayer:
            QgsMessageLog.logMessage('Layer failed to load')
        return
